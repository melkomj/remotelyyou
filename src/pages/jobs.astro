---
import BaseLayout from "../layouts/BaseLayout.astro";
const title = "beginner-friendly remote jobs";
---
<BaseLayout {title}>
  <section class="hero">
    <h1>beginner-friendly remote jobs</h1>
    <p class="lead">hand-curated remote opportunities you can actually land. updated regularly with entry-level and junior positions.</p>
  </section>

  <section class="card">
    <div class="filters-grid">
      <div class="search-group">
        <label for="q" class="form-label">search</label>
        <input 
          id="q" 
          type="text"
          placeholder="job title, company, skills..." 
          class="form-input search-input"
        />
      </div>

      <div class="filter-group">
        <label for="level" class="form-label">experience level</label>
        <select id="level" class="form-select">
          <option value="">all levels</option>
          <option value="entry">entry level</option>
          <option value="junior">junior (1-2 years)</option>
          <option value="experienced">experienced (3+ years)</option>
        </select>
      </div>

      <div class="filter-group">
        <label for="jobType" class="form-label">job type</label>
        <select id="jobType" class="form-select">
          <option value="">all types</option>
          <option value="full-time">full-time</option>
          <option value="part-time">part-time</option>
          <option value="contract">contract</option>
          <option value="internship">internship</option>
        </select>
      </div>

      <div class="filter-group">
        <label for="category" class="form-label">category</label>
        <select id="category" class="form-select">
          <option value="">all categories</option>
          <option value="customer-service">customer service</option>
          <option value="marketing">marketing</option>
          <option value="sales">sales</option>
          <option value="writing">writing & content</option>
          <option value="design">design</option>
          <option value="development">development</option>
          <option value="data">data & analytics</option>
          <option value="virtual-assistant">virtual assistant</option>
          <option value="project-management">project management</option>
        </select>
      </div>

      <div class="filter-group">
        <label for="country" class="form-label">location</label>
        <select id="country" class="form-select">
          <option value="">all locations</option>
        </select>
      </div>

      <div class="filter-group checkbox-group">
        <label class="checkbox-label">
          <input id="globalOnly" type="checkbox" />
          global remote only
        </label>
      </div>
    </div>

    <div class="filter-actions">
      <button id="clearFilters" class="btn btn--outline btn-small">clear filters</button>
      <div class="results-info">
        <span id="count" class="muted">loading jobs...</span>
      </div>
    </div>
  </section>

  <section class="jobs-section">
    <ul id="list" class="list-none"></ul>
    
    <div id="loadingState" class="loading-state">
      <p>loading fresh remote opportunities...</p>
    </div>
    
    <div id="emptyState" class="empty-state" style="display: none;">
      <h3>no jobs match your filters</h3>
      <p>try adjusting your search criteria or <button id="clearFiltersInline" class="link-button">clear all filters</button></p>
    </div>

    <!-- Pagination Controls -->
    <div id="paginationControls" class="pagination-controls" style="display: none;">
      <button id="prevPage" class="btn btn--outline btn-small">← previous</button>
      <span id="pageInfo" class="page-info">page 1 of 1</span>
      <button id="nextPage" class="btn btn--outline btn-small">next →</button>
    </div>
  </section>

  <section class="card cta">
    <h2>want to land remote work faster?</h2>
    <p>get our free step-by-step roadmap that shows you exactly how to transition to remote work</p>
    <a href="/course" class="btn">get the free roadmap</a>
  </section>

  <style>
    .filters-grid {
      display: grid;
      grid-template-columns: 2fr 1fr 1fr 1.2fr 1fr auto;
      gap: var(--space-4);
      align-items: end;
      margin-bottom: var(--space-5);
    }

    .search-group {
      min-width: 0;
    }

    .filter-group {
      min-width: 0;
    }

    .checkbox-group {
      display: flex;
      align-items: center;
      min-height: 44px;
    }

    .filter-actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: var(--space-4);
      border-top: 1px solid var(--color-gray-200);
    }

    .results-info {
      font-size: var(--font-size-sm);
    }

    .job-card {
      background: var(--color-white);
      border: 1px solid var(--color-gray-200);
      border-radius: var(--radius-xl);
      padding: var(--space-6);
      margin-bottom: var(--space-4);
      transition: all 0.2s ease;
    }

    .job-card:hover {
      border-color: var(--color-secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-1px);
    }

    .job-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: var(--space-4);
      margin-bottom: var(--space-3);
    }

    .job-title {
      flex: 1;
      min-width: 0;
    }

    .job-title a {
      font-size: var(--font-size-lg);
      font-weight: 600;
      color: var(--color-black);
      text-decoration: none;
    }

    .job-title a:hover {
      color: var(--color-secondary);
    }

    .job-meta {
      color: var(--color-gray-600);
      font-size: var(--font-size-sm);
      margin-top: var(--space-1);
    }

    .job-actions {
      text-align: right;
      white-space: nowrap;
    }

    .job-date {
      font-size: var(--font-size-xs);
      color: var(--color-gray-500);
      margin-bottom: var(--space-2);
    }

    .job-tags {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-2);
      margin-top: var(--space-3);
    }

    .job-tag {
      padding: var(--space-1) var(--space-2);
      background: var(--color-gray-100);
      color: var(--color-gray-700);
      border-radius: var(--radius-sm);
      font-size: var(--font-size-xs);
      font-weight: 500;
    }

    .job-tag.level {
      background: var(--color-teal-100);
      color: var(--color-teal-800);
    }

    .job-tag.remote {
      background: var(--color-coral-100);
      color: var(--color-coral-800);
    }

    .pagination-controls {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: var(--space-4);
      margin-top: var(--space-8);
      padding: var(--space-4);
    }

    .page-info {
      color: var(--color-gray-600);
      font-size: var(--font-size-sm);
    }

    @media (max-width: 1024px) {
      .filters-grid {
        grid-template-columns: 1fr 1fr 1fr;
        gap: var(--space-3);
      }

      .search-group {
        grid-column: 1 / -1;
      }

      .checkbox-group {
        grid-column: 1 / -1;
        justify-content: center;
      }
    }

    @media (max-width: 768px) {
      .filters-grid {
        grid-template-columns: 1fr;
        gap: var(--space-4);
      }

      .job-header {
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-3);
      }

      .job-actions {
        text-align: left;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .filter-actions {
        flex-direction: column;
        gap: var(--space-3);
        text-align: center;
      }

      .pagination-controls {
        flex-direction: column;
        gap: var(--space-2);
      }
    }
  </style>

  <script type="module">
    const list = document.getElementById('list');
    const count = document.getElementById('count');
    const q = document.getElementById('q');
    const level = document.getElementById('level');
    const jobType = document.getElementById('jobType');
    const category = document.getElementById('category');
    const countrySel = document.getElementById('country');
    const globalOnly = document.getElementById('globalOnly');
    const clearFilters = document.getElementById('clearFilters');
    const clearFiltersInline = document.getElementById('clearFiltersInline');
    const loadingState = document.getElementById('loadingState');
    const emptyState = document.getElementById('emptyState');
    const paginationControls = document.getElementById('paginationControls');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const pageInfo = document.getElementById('pageInfo');

    let all = [];
    let filtered = [];
    let currentPage = 1;
    const jobsPerPage = 20;
    let allCountries = new Set();

    // Country mapping
    const countryMap = new Map(Object.entries({
      "czech republic": "czechia",
      "cz": "czechia",
      "czechia": "czechia",
      "united kingdom": "uk",
      "great britain": "uk",
      "gb": "uk",
      "uk": "uk",
      "england": "uk",
      "scotland": "uk",
      "wales": "uk",
      "northern ireland": "uk",
      "united states": "usa",
      "u.s.a.": "usa",
      "u.s.": "usa",
      "us": "usa",
      "usa": "usa",
      "united arab emirates": "uae",
      "uae": "uae",
      "netherlands": "netherlands",
      "holland": "netherlands",
      "germany": "germany",
      "france": "france",
      "spain": "spain",
      "portugal": "portugal",
      "ireland": "ireland",
      "australia": "australia",
      "new zealand": "new zealand",
      "canada": "canada",
      "india": "india"
    }));

    // Global patterns
    const globalPatterns = [
      /(^|\b)remote(\b|$)/i,
      /anywhere/i,
      /worldwide/i,
      /global/i,
      /any location/i,
      /work from anywhere/i,
      /open to.*any.*timezone/i,
      /distributed/i
    ];

    function isGlobal(j) {
      const hay = [
        j.location || "",
        ...(j.tags || []),
        (j.title || "")
      ].join(" ").toLowerCase();
      return globalPatterns.some(rx => rx.test(hay));
    }

    function extractCountries(raw) {
      if (!raw) return [];
      const s = String(raw).toLowerCase();

      if (globalPatterns.some(rx => rx.test(s))) return [];

      const parts = s.split(/[\/,|•\-–]+/).map(p => p.trim()).filter(Boolean);
      const norm = parts.map(p => {
        const w = p
          .replace(/\d+/g, '')
          .replace(/\b(remote|hybrid|onsite|office|time.?zone|tz)\b/gi, '')
          .trim();
        return countryMap.get(w) || w;
      }).filter(Boolean);

      const bad = new Set(["remote", "hybrid", "onsite", "office", "", "global", "anywhere"]);
      return Array.from(new Set(norm.filter(x => !bad.has(x))));
    }

    function addCountryOptions(countries) {
      const arr = Array.from(countries).sort();
      for (const c of arr) {
        const opt = document.createElement('option');
        opt.value = c;
        opt.textContent = c;
        countrySel.appendChild(opt);
      }
    }

    function categorizeJob(job) {
      const text = (job.title + ' ' + (job.tags || []).join(' ')).toLowerCase();
      
      if (/customer.service|support|help.desk/i.test(text)) return 'customer-service';
      if (/marketing|social.media|seo|content.marketing/i.test(text)) return 'marketing';
      if (/sales|account.manager|business.development/i.test(text)) return 'sales';
      if (/writer|content|copywriter|editor|blog/i.test(text)) return 'writing';
      if (/design|ui|ux|graphic|visual/i.test(text)) return 'design';
      if (/developer|programmer|engineer|coding|software/i.test(text)) return 'development';
      if (/data|analyst|analytics|sql|excel/i.test(text)) return 'data';
      if (/virtual.assistant|va|admin|assistant/i.test(text)) return 'virtual-assistant';
      if (/project.manager|coordinator|scrum|agile/i.test(text)) return 'project-management';
      
      return 'other';
    }

    function getJobType(job) {
      const text = (job.title + ' ' + (job.tags || []).join(' ')).toLowerCase();
      
      if (/part.time|parttime/i.test(text)) return 'part-time';
      if (/contract|contractor|freelance/i.test(text)) return 'contract';
      if (/intern|internship/i.test(text)) return 'internship';
      
      return 'full-time';
    }

    async function load() {
      try {
        const res = await fetch('/jobs.json', { cache: 'no-store' });
        const data = await res.json();
        all = (data?.jobs || []).map(job => ({
          ...job,
          jobCategory: categorizeJob(job),
          jobType: getJobType(job)
        }));

        allCountries.clear();
        for (const j of all) {
          extractCountries(j.location).forEach(c => allCountries.add(c));
        }
        addCountryOptions(allCountries);

        loadingState.style.display = 'none';
        applyFilters();
      } catch (error) {
        loadingState.style.display = 'none';
        list.innerHTML = '<li class="empty-state"><p>Unable to load jobs. Please try again later.</p></li>';
      }
    }

    function applyFilters() {
      const term = q.value.trim().toLowerCase();
      const lvl = level.value;
      const jType = jobType.value;
      const cat = category.value;
      const selCountry = countrySel.value;
      const wantGlobal = globalOnly.checked;

      filtered = all.filter(j => {
        // Text search
        const text = (j.title + ' ' + (j.company || '') + ' ' + (j.tags || []).join(' ') + ' ' + (j.location || '')).toLowerCase();
        const passTerm = !term || text.includes(term);

        // Experience level
        const isEntry = (j.tags || []).some(t => /entry|junior|beginner|entry.level/i.test(String(t)));
        const isJunior = (j.tags || []).some(t => /junior|1-2.years/i.test(String(t)));
        let passLevel = true;
        if (lvl === 'entry') passLevel = isEntry;
        else if (lvl === 'junior') passLevel = isJunior;
        else if (lvl === 'experienced') passLevel = !isEntry && !isJunior;

        // Job type
        const passJobType = !jType || j.jobType === jType;

        // Category
        const passCategory = !cat || j.jobCategory === cat;

        // Global-only
        if (wantGlobal && !isGlobal(j)) return false;

        // Single-country
        if (selCountry) {
          const cs = extractCountries(j.location);
          if (!cs.includes(selCountry)) return false;
        }

        return passTerm && passLevel && passJobType && passCategory;
      });

      currentPage = 1;
      render();
    }

    function render() {
      const totalPages = Math.ceil(filtered.length / jobsPerPage);
      const startIndex = (currentPage - 1) * jobsPerPage;
      const endIndex = startIndex + jobsPerPage;
      const pageJobs = filtered.slice(startIndex, endIndex);

      if (filtered.length === 0) {
        list.style.display = 'none';
        emptyState.style.display = 'block';
        paginationControls.style.display = 'none';
      } else {
        list.style.display = 'block';
        emptyState.style.display = 'none';
        
        list.innerHTML = pageJobs.map(j => {
          const tags = (j.tags || []).map(t => {
            const tag = String(t).toLowerCase();
            let className = 'job-tag';
            if (/entry|junior|beginner/i.test(tag)) className += ' level';
            if (/remote|global|anywhere/i.test(tag)) className += ' remote';
            return `<span class="${className}">${t}</span>`;
          }).join('');

          return `
            <li class="job-card">
              <div class="job-header">
                <div class="job-title">
                  <a href="${j.source_url}" target="_blank" rel="noopener">${j.title}</a>
                  <div class="job-meta">
                    ${j.company ? j.company + ' • ' : ''}${j.location || 'remote'}
                  </div>
                </div>
                <div class="job-actions">
                  <div class="job-date">${j.posted_at ? new Date(j.posted_at).toLocaleDateString() : ''}</div>
                  <a class="btn btn-small" href="${j.source_url}" target="_blank" rel="noopener">apply</a>
                </div>
              </div>
              ${tags ? `<div class="job-tags">${tags}</div>` : ''}
            </li>
          `;
        }).join('');

        // Update pagination
        if (totalPages > 1) {
          paginationControls.style.display = 'flex';
          pageInfo.textContent = `page ${currentPage} of ${totalPages}`;
          prevPage.disabled = currentPage === 1;
          nextPage.disabled = currentPage === totalPages;
        } else {
          paginationControls.style.display = 'none';
        }
      }

      count.textContent = `${filtered.length} job${filtered.length === 1 ? '' : 's'} found`;
    }

    function clearAllFilters() {
      q.value = '';
      level.value = '';
      jobType.value = '';
      category.value = '';
      countrySel.value = '';
      globalOnly.checked = false;
      applyFilters();
    }

    // Event listeners
    q.addEventListener('input', applyFilters);
    level.addEventListener('change', applyFilters);
    jobType.addEventListener('change', applyFilters);
    category.addEventListener('change', applyFilters);
    countrySel.addEventListener('change', applyFilters);
    globalOnly.addEventListener('change', applyFilters);
    clearFilters.addEventListener('click', clearAllFilters);
    clearFiltersInline.addEventListener('click', clearAllFilters);

    prevPage.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        render();
        window.scrollTo(0, 0);
      }
    });

    nextPage.addEventListener('click', () => {
      const totalPages = Math.ceil(filtered.length / jobsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        render();
        window.scrollTo(0, 0);
      }
    });

    // Initialize
    load();
  </script>
</BaseLayout>