---
import BaseLayout from "../layouts/BaseLayout.astro";
const title = "beginner-friendly remote jobs";
---
<BaseLayout {title}>
  <section class="card">
    <h2>beginner-friendly remote jobs</h2>
    <p class="muted">curated roles you can actually apply for. updated regularly.</p>

    <!-- filters (client-side) -->
    <div style="display:flex;gap:10px;flex-wrap:wrap;margin:12px 0">
      <input id="q" placeholder="search title, company..." style="padding:10px;border:1px solid #e8e8e8;border-radius:10px;flex:1;min-width:220px" />
      <select id="level" style="padding:10px;border:1px solid #e8e8e8;border-radius:10px">
        <option value="">all levels</option>
        <option value="entry">entry level</option>
        <option value="experienced">experienced</option>
      </select>
    </div>

    <ul id="list" style="list-style:none;padding:0;margin:0"></ul>
    <p id="count" class="muted" style="margin-top:8px"></p>
  </section>

  <aside class="card" style="margin-top:14px">
    <h3>new here?</h3>
    <p class="muted">get the free <strong>work from anywhere roadmap</strong> and learn exactly how to land your first remote job.</p>
    <a class="btn" href="/course">get the free roadmap</a>
  </aside>

  <script type="module">
    const list = document.getElementById('list');
    const count = document.getElementById('count');
    const q = document.getElementById('q');
    const level = document.getElementById('level');

    let all = [];

    async function load() {
      try {
        const res = await fetch('/jobs.json', { cache: 'no-store' });
        const data = await res.json();
        all = (data?.jobs) || [];
        render();
      } catch (e) {
        list.innerHTML = '<li class="muted">could not load jobs.</li>';
      }
    }

    function render() {
      const term = q.value.trim().toLowerCase();
      const lvl = level.value;

      const filtered = all.filter(j => {
        const text = (j.title + ' ' + (j.company||'') + ' ' + (j.tags||[]).join(' ')).toLowerCase();
        const passTerm = !term || text.includes(term);
        const isEntry = (j.tags||[]).some(t => /entry/.test(t.toLowerCase()));
        const passLevel = !lvl || (lvl === 'entry' ? isEntry : !isEntry);
        return passTerm && passLevel;
      });

      list.innerHTML = filtered.map(j => `
        <li class="card" style="margin-bottom:10px">
          <div style="display:flex;justify-content:space-between;gap:12px;flex-wrap:wrap">
            <div>
              <a href="${j.source_url}" target="_blank" rel="noopener"><strong>${j.title}</strong></a>
              <div class="muted" style="margin-top:4px">${(j.company? j.company + ' â€¢ ' : '') + (j.location || 'remote')}</div>
              <div style="margin-top:6px">${(j.tags||[]).map(t => `<span class="pill">${t}</span>`).join('')}</div>
            </div>
            <div style="text-align:right;min-width:150px">
              <div class="muted" style="font-size:13px">${j.posted_at ? new Date(j.posted_at).toLocaleDateString() : ''}</div>
              <a class="btn btn--outline" href="${j.source_url}" target="_blank" rel="noopener">apply</a>
            </div>
          </div>
        </li>
      `).join('');

      count.textContent = `${filtered.length} job${filtered.length===1?'':'s'} shown`;
    }

    q.addEventListener('input', render);
    level.addEventListener('change', render);
    load();
  </script>
</BaseLayout>
