---
// FilterableJobBoard.astro
export interface Props {
  jobs: any[];
}

const { jobs } = Astro.props;
---

<div class="job-board-container">
  <!-- Filter Controls -->
  <div class="filters-container">
    <div class="filter-row">
      <div class="filter-group">
        <label for="search">Search Jobs:</label>
        <input type="text" id="search" placeholder="Search by title, company, or keywords..." />
      </div>
      
      <div class="filter-group">
        <label for="category">Category:</label>
        <select id="category">
          <option value="">All Categories</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label for="location">Location:</label>
        <select id="location">
          <option value="">All Locations</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label for="jobType">Job Type:</label>
        <select id="jobType">
          <option value="">All Types</option>
        </select>
      </div>
    </div>
    
    <div class="filter-actions">
      <button id="clearFilters" class="clear-btn">Clear All Filters</button>
      <span id="resultCount" class="result-count"></span>
    </div>
  </div>

  <!-- Jobs List -->
  <div id="jobsList" class="jobs-grid">
    <!-- Jobs will be populated here by JavaScript -->
  </div>

  <!-- No Results Message -->
  <div id="noResults" class="no-results" style="display: none;">
    <h3>No jobs found</h3>
    <p>Try adjusting your filters or search terms.</p>
  </div>
</div>

<style>
  .job-board-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .filters-container {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
    border: 1px solid #e9ecef;
  }

  .filter-row {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr 1fr;
    gap: 20px;
    margin-bottom: 15px;
  }

  @media (max-width: 768px) {
    .filter-row {
      grid-template-columns: 1fr;
      gap: 15px;
    }
  }

  .filter-group {
    display: flex;
    flex-direction: column;
  }

  .filter-group label {
    font-weight: 600;
    margin-bottom: 5px;
    color: #495057;
    font-size: 14px;
  }

  .filter-group input,
  .filter-group select {
    padding: 10px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    background: white;
  }

  .filter-group input:focus,
  .filter-group select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
  }

  .filter-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .clear-btn {
    background: #6c757d;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }

  .clear-btn:hover {
    background: #5a6268;
  }

  .result-count {
    font-size: 14px;
    color: #6c757d;
    font-weight: 500;
  }

  .jobs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 20px;
  }

  .job-card {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 20px;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .job-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  .job-title {
    font-size: 18px;
    font-weight: 600;
    color: #212529;
    margin-bottom: 8px;
  }

  .job-company {
    font-size: 16px;
    color: #007bff;
    margin-bottom: 12px;
    font-weight: 500;
  }

  .job-details {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 12px;
  }

  .job-tag {
    background: #e9ecef;
    color: #495057;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
  }

  .job-tag.location { background: #d4edda; color: #155724; }
  .job-tag.type { background: #cce5ff; color: #004085; }
  .job-tag.category { background: #fff3cd; color: #856404; }

  .job-description {
    color: #6c757d;
    font-size: 14px;
    line-height: 1.5;
    margin-bottom: 15px;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .job-posted {
    font-size: 12px;
    color: #868e96;
    text-align: right;
  }

  .no-results {
    text-align: center;
    padding: 40px;
    color: #6c757d;
  }

  .no-results h3 {
    margin-bottom: 10px;
  }
</style>

<script define:vars={{ jobs }}>
  // Initialize the filterable job board
  class FilterableJobBoard {
    constructor(jobs) {
      this.allJobs = jobs;
      this.filteredJobs = jobs;
      this.initializeFilters();
      this.setupEventListeners();
      this.renderJobs();
      this.updateResultCount();
    }

    initializeFilters() {
      // Get unique values for filter options
      const categories = [...new Set(this.allJobs.map(job => job.category).filter(Boolean))];
      const locations = [...new Set(this.allJobs.map(job => job.location).filter(Boolean))];
      const jobTypes = [...new Set(this.allJobs.map(job => job.jobType || job.type).filter(Boolean))];

      // Populate category dropdown
      const categorySelect = document.getElementById('category');
      categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
      });

      // Populate location dropdown
      const locationSelect = document.getElementById('location');
      locations.forEach(location => {
        const option = document.createElement('option');
        option.value = location;
        option.textContent = location;
        locationSelect.appendChild(option);
      });

      // Populate job type dropdown
      const jobTypeSelect = document.getElementById('jobType');
      jobTypes.forEach(type => {
        const option = document.createElement('option');
        option.value = type;
        option.textContent = type;
        jobTypeSelect.appendChild(option);
      });
    }

    setupEventListeners() {
      // Search input
      document.getElementById('search').addEventListener('input', () => this.filterJobs());
      
      // Filter dropdowns
      document.getElementById('category').addEventListener('change', () => this.filterJobs());
      document.getElementById('location').addEventListener('change', () => this.filterJobs());
      document.getElementById('jobType').addEventListener('change', () => this.filterJobs());
      
      // Clear filters button
      document.getElementById('clearFilters').addEventListener('click', () => this.clearFilters());
    }

    filterJobs() {
      const searchTerm = document.getElementById('search').value.toLowerCase();
      const selectedCategory = document.getElementById('category').value;
      const selectedLocation = document.getElementById('location').value;
      const selectedJobType = document.getElementById('jobType').value;

      this.filteredJobs = this.allJobs.filter(job => {
        // Search filter
        const matchesSearch = !searchTerm || 
          job.title?.toLowerCase().includes(searchTerm) ||
          job.company?.toLowerCase().includes(searchTerm) ||
          job.description?.toLowerCase().includes(searchTerm);

        // Category filter
        const matchesCategory = !selectedCategory || job.category === selectedCategory;

        // Location filter
        const matchesLocation = !selectedLocation || job.location === selectedLocation;

        // Job type filter
        const matchesJobType = !selectedJobType || 
          job.jobType === selectedJobType || 
          job.type === selectedJobType;

        return matchesSearch && matchesCategory && matchesLocation && matchesJobType;
      });

      this.renderJobs();
      this.updateResultCount();
    }

    renderJobs() {
      const jobsList = document.getElementById('jobsList');
      const noResults = document.getElementById('noResults');

      if (this.filteredJobs.length === 0) {
        jobsList.style.display = 'none';
        noResults.style.display = 'block';
        return;
      }

      jobsList.style.display = 'grid';
      noResults.style.display = 'none';

      jobsList.innerHTML = this.filteredJobs.map(job => `
        <div class="job-card">
          <h3 class="job-title">${job.title || 'No Title'}</h3>
          <div class="job-company">${job.company || 'No Company'}</div>
          
          <div class="job-details">
            ${job.location ? `<span class="job-tag location">${job.location}</span>` : ''}
            ${job.jobType || job.type ? `<span class="job-tag type">${job.jobType || job.type}</span>` : ''}
            ${job.category ? `<span class="job-tag category">${job.category}</span>` : ''}
          </div>
          
          ${job.description ? `<div class="job-description">${job.description}</div>` : ''}
          
          ${job.posted_date || job.date ? `<div class="job-posted">Posted: ${job.posted_date || job.date}</div>` : ''}
        </div>
      `).join('');
    }

    updateResultCount() {
      const resultCount = document.getElementById('resultCount');
      const total = this.allJobs.length;
      const filtered = this.filteredJobs.length;
      
      if (filtered === total) {
        resultCount.textContent = `Showing all ${total} jobs`;
      } else {
        resultCount.textContent = `Showing ${filtered} of ${total} jobs`;
      }
    }

    clearFilters() {
      document.getElementById('search').value = '';
      document.getElementById('category').value = '';
      document.getElementById('location').value = '';
      document.getElementById('jobType').value = '';
      
      this.filteredJobs = this.allJobs;
      this.renderJobs();
      this.updateResultCount();
    }
  }

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', () => {
    new FilterableJobBoard(jobs);
  });
</script>